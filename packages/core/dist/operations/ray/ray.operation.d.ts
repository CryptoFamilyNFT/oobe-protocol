import { Agent } from "../../agent/Agents";
import { Token, TokenAccount, TokenAccountRaw, TokenAmount, LiquidityStateV4 } from "@raydium-io/raydium-sdk-v2";
import { Connection, PublicKey } from "@solana/web3.js";
export declare class RayOperation {
    private agent;
    private raydium;
    private static existingLiquidityPools;
    private static quoteToken;
    private static readonly MINIMAL_MARKET_STATE_LAYOUT_V3;
    private static readonly GET_ONLY;
    constructor(_agent: Agent);
    private initialize;
    getNewPools(): Promise<({
        pool: {
            status: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            nonce: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            state: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            lpVault: PublicKey;
            lpMint: PublicKey;
            padding: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            }[];
            owner: PublicKey;
            baseMint: PublicKey;
            quoteMint: PublicKey;
            baseVault: PublicKey;
            quoteVault: PublicKey;
            baseLotSize: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            quoteLotSize: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            marketId: PublicKey;
            maxOrder: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            depth: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            baseDecimal: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            quoteDecimal: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            resetFlag: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            minSize: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            volMaxCutRatio: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            amountWaveRatio: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            minPriceMultiplier: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            maxPriceMultiplier: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            systemDecimalValue: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            minSeparateNumerator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            minSeparateDenominator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            tradeFeeNumerator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            tradeFeeDenominator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            pnlNumerator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            pnlDenominator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapFeeNumerator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapFeeDenominator: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            baseNeedTakePnl: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            quoteNeedTakePnl: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            quoteTotalPnl: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            baseTotalPnl: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            poolOpenTime: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            punishPcAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            punishCoinAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            orderbookToInitTime: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapBaseInAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapQuoteOutAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapBase2QuoteFee: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapQuoteInAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapBaseOutAmount: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            swapQuote2BaseFee: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
            openOrders: PublicKey;
            marketProgramId: PublicKey;
            targetOrders: PublicKey;
            withdrawQueue: PublicKey;
            lpReserve: {
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): {
                    fromRed(): import("bn.js");
                    redAdd(b: /*elided*/ any): /*elided*/ any;
                    redIAdd(b: /*elided*/ any): /*elided*/ any;
                    redSub(b: /*elided*/ any): /*elided*/ any;
                    redISub(b: /*elided*/ any): /*elided*/ any;
                    redShl(num: number): /*elided*/ any;
                    redMul(b: /*elided*/ any): /*elided*/ any;
                    redIMul(b: /*elided*/ any): /*elided*/ any;
                    redSqr(): /*elided*/ any;
                    redISqr(): /*elided*/ any;
                    redSqrt(): /*elided*/ any;
                    redInvm(): /*elided*/ any;
                    redNeg(): /*elided*/ any;
                    redPow(b: import("bn.js")): /*elided*/ any;
                    copy(dest: import("bn.js")): void;
                    clone(): import("bn.js");
                    toString(base?: number | "hex", length?: number): string;
                    toNumber(): number;
                    toJSON(): string;
                    toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                    toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                    toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                    toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                    bitLength(): number;
                    zeroBits(): number;
                    byteLength(): number;
                    isNeg(): boolean;
                    isEven(): boolean;
                    isOdd(): boolean;
                    isZero(): boolean;
                    cmp(b: import("bn.js")): -1 | 0 | 1;
                    ucmp(b: import("bn.js")): -1 | 0 | 1;
                    cmpn(b: number): -1 | 0 | 1;
                    lt(b: import("bn.js")): boolean;
                    ltn(b: number): boolean;
                    lte(b: import("bn.js")): boolean;
                    lten(b: number): boolean;
                    gt(b: import("bn.js")): boolean;
                    gtn(b: number): boolean;
                    gte(b: import("bn.js")): boolean;
                    gten(b: number): boolean;
                    eq(b: import("bn.js")): boolean;
                    eqn(b: number): boolean;
                    toTwos(width: number): import("bn.js");
                    fromTwos(width: number): import("bn.js");
                    neg(): import("bn.js");
                    ineg(): import("bn.js");
                    abs(): import("bn.js");
                    iabs(): import("bn.js");
                    add(b: import("bn.js")): import("bn.js");
                    iadd(b: import("bn.js")): import("bn.js");
                    addn(b: number): import("bn.js");
                    iaddn(b: number): import("bn.js");
                    sub(b: import("bn.js")): import("bn.js");
                    isub(b: import("bn.js")): import("bn.js");
                    subn(b: number): import("bn.js");
                    isubn(b: number): import("bn.js");
                    mul(b: import("bn.js")): import("bn.js");
                    imul(b: import("bn.js")): import("bn.js");
                    muln(b: number): import("bn.js");
                    imuln(b: number): import("bn.js");
                    sqr(): import("bn.js");
                    isqr(): import("bn.js");
                    pow(b: import("bn.js")): import("bn.js");
                    div(b: import("bn.js")): import("bn.js");
                    divn(b: number): import("bn.js");
                    idivn(b: number): import("bn.js");
                    divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                        div: import("bn.js");
                        mod: import("bn.js");
                    };
                    mod(b: import("bn.js")): import("bn.js");
                    umod(b: import("bn.js")): import("bn.js");
                    modn(b: number): number;
                    modrn(b: number): number;
                    divRound(b: import("bn.js")): import("bn.js");
                    or(b: import("bn.js")): import("bn.js");
                    ior(b: import("bn.js")): import("bn.js");
                    uor(b: import("bn.js")): import("bn.js");
                    iuor(b: import("bn.js")): import("bn.js");
                    and(b: import("bn.js")): import("bn.js");
                    iand(b: import("bn.js")): import("bn.js");
                    uand(b: import("bn.js")): import("bn.js");
                    iuand(b: import("bn.js")): import("bn.js");
                    andln(b: number): import("bn.js");
                    xor(b: import("bn.js")): import("bn.js");
                    ixor(b: import("bn.js")): import("bn.js");
                    uxor(b: import("bn.js")): import("bn.js");
                    iuxor(b: import("bn.js")): import("bn.js");
                    setn(b: number, value: boolean | 0 | 1): import("bn.js");
                    shln(b: number): import("bn.js");
                    ishln(b: number): import("bn.js");
                    ushln(b: number): import("bn.js");
                    iushln(b: number): import("bn.js");
                    shrn(b: number): import("bn.js");
                    ishrn(b: number): import("bn.js");
                    ushrn(b: number): import("bn.js");
                    iushrn(b: number): import("bn.js");
                    testn(b: number): boolean;
                    maskn(b: number): import("bn.js");
                    imaskn(b: number): import("bn.js");
                    bincn(b: number): import("bn.js");
                    notn(w: number): import("bn.js");
                    inotn(w: number): import("bn.js");
                    gcd(b: import("bn.js")): import("bn.js");
                    egcd(b: import("bn.js")): {
                        a: import("bn.js");
                        b: import("bn.js");
                        gcd: import("bn.js");
                    };
                    invm(b: import("bn.js")): import("bn.js");
                    toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
                };
            };
        };
        baseToken: {
            mint: string;
            name: any;
            symbol: any;
            decimals: any;
        };
        quoteToken: {
            mint: string;
            name: any;
            symbol: any;
            decimals: any;
        };
    } | null)[]>;
    getFungibleTokens(walletAddress: string, connection: Connection): Promise<{
        mint: any;
        decimals: number;
    }[]>;
    private fetchAndDecodePools;
    fetchTokenMetadata(mint: PublicKey): Promise<{
        mint: string;
        name: any;
        symbol: any;
        decimals: any;
    }>;
    decodeLiquidityPool(poolKeys: PublicKey): Promise<{
        status: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        nonce: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        state: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        lpVault: PublicKey;
        lpMint: PublicKey;
        padding: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        }[];
        owner: PublicKey;
        baseMint: PublicKey;
        quoteMint: PublicKey;
        baseVault: PublicKey;
        quoteVault: PublicKey;
        baseLotSize: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        quoteLotSize: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        marketId: PublicKey;
        maxOrder: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        depth: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        baseDecimal: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        quoteDecimal: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        resetFlag: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        minSize: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        volMaxCutRatio: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        amountWaveRatio: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        minPriceMultiplier: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        maxPriceMultiplier: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        systemDecimalValue: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        minSeparateNumerator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        minSeparateDenominator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        tradeFeeNumerator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        tradeFeeDenominator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        pnlNumerator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        pnlDenominator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapFeeNumerator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapFeeDenominator: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        baseNeedTakePnl: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        quoteNeedTakePnl: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        quoteTotalPnl: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        baseTotalPnl: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        poolOpenTime: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        punishPcAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        punishCoinAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        orderbookToInitTime: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapBaseInAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapQuoteOutAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapBase2QuoteFee: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapQuoteInAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapBaseOutAmount: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        swapQuote2BaseFee: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
        openOrders: PublicKey;
        marketProgramId: PublicKey;
        targetOrders: PublicKey;
        withdrawQueue: PublicKey;
        lpReserve: {
            copy(dest: import("bn.js")): void;
            clone(): import("bn.js");
            toString(base?: number | "hex", length?: number): string;
            toNumber(): number;
            toJSON(): string;
            toArray(endian?: import("bn.js").Endianness, length?: number): number[];
            toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
            toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
            toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
            bitLength(): number;
            zeroBits(): number;
            byteLength(): number;
            isNeg(): boolean;
            isEven(): boolean;
            isOdd(): boolean;
            isZero(): boolean;
            cmp(b: import("bn.js")): -1 | 0 | 1;
            ucmp(b: import("bn.js")): -1 | 0 | 1;
            cmpn(b: number): -1 | 0 | 1;
            lt(b: import("bn.js")): boolean;
            ltn(b: number): boolean;
            lte(b: import("bn.js")): boolean;
            lten(b: number): boolean;
            gt(b: import("bn.js")): boolean;
            gtn(b: number): boolean;
            gte(b: import("bn.js")): boolean;
            gten(b: number): boolean;
            eq(b: import("bn.js")): boolean;
            eqn(b: number): boolean;
            toTwos(width: number): import("bn.js");
            fromTwos(width: number): import("bn.js");
            neg(): import("bn.js");
            ineg(): import("bn.js");
            abs(): import("bn.js");
            iabs(): import("bn.js");
            add(b: import("bn.js")): import("bn.js");
            iadd(b: import("bn.js")): import("bn.js");
            addn(b: number): import("bn.js");
            iaddn(b: number): import("bn.js");
            sub(b: import("bn.js")): import("bn.js");
            isub(b: import("bn.js")): import("bn.js");
            subn(b: number): import("bn.js");
            isubn(b: number): import("bn.js");
            mul(b: import("bn.js")): import("bn.js");
            imul(b: import("bn.js")): import("bn.js");
            muln(b: number): import("bn.js");
            imuln(b: number): import("bn.js");
            sqr(): import("bn.js");
            isqr(): import("bn.js");
            pow(b: import("bn.js")): import("bn.js");
            div(b: import("bn.js")): import("bn.js");
            divn(b: number): import("bn.js");
            idivn(b: number): import("bn.js");
            divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                div: import("bn.js");
                mod: import("bn.js");
            };
            mod(b: import("bn.js")): import("bn.js");
            umod(b: import("bn.js")): import("bn.js");
            modn(b: number): number;
            modrn(b: number): number;
            divRound(b: import("bn.js")): import("bn.js");
            or(b: import("bn.js")): import("bn.js");
            ior(b: import("bn.js")): import("bn.js");
            uor(b: import("bn.js")): import("bn.js");
            iuor(b: import("bn.js")): import("bn.js");
            and(b: import("bn.js")): import("bn.js");
            iand(b: import("bn.js")): import("bn.js");
            uand(b: import("bn.js")): import("bn.js");
            iuand(b: import("bn.js")): import("bn.js");
            andln(b: number): import("bn.js");
            xor(b: import("bn.js")): import("bn.js");
            ixor(b: import("bn.js")): import("bn.js");
            uxor(b: import("bn.js")): import("bn.js");
            iuxor(b: import("bn.js")): import("bn.js");
            setn(b: number, value: boolean | 0 | 1): import("bn.js");
            shln(b: number): import("bn.js");
            ishln(b: number): import("bn.js");
            ushln(b: number): import("bn.js");
            iushln(b: number): import("bn.js");
            shrn(b: number): import("bn.js");
            ishrn(b: number): import("bn.js");
            ushrn(b: number): import("bn.js");
            iushrn(b: number): import("bn.js");
            testn(b: number): boolean;
            maskn(b: number): import("bn.js");
            imaskn(b: number): import("bn.js");
            bincn(b: number): import("bn.js");
            notn(w: number): import("bn.js");
            inotn(w: number): import("bn.js");
            gcd(b: import("bn.js")): import("bn.js");
            egcd(b: import("bn.js")): {
                a: import("bn.js");
                b: import("bn.js");
                gcd: import("bn.js");
            };
            invm(b: import("bn.js")): import("bn.js");
            toRed(reductionContext: import("bn.js").ReductionContext): {
                fromRed(): import("bn.js");
                redAdd(b: /*elided*/ any): /*elided*/ any;
                redIAdd(b: /*elided*/ any): /*elided*/ any;
                redSub(b: /*elided*/ any): /*elided*/ any;
                redISub(b: /*elided*/ any): /*elided*/ any;
                redShl(num: number): /*elided*/ any;
                redMul(b: /*elided*/ any): /*elided*/ any;
                redIMul(b: /*elided*/ any): /*elided*/ any;
                redSqr(): /*elided*/ any;
                redISqr(): /*elided*/ any;
                redSqrt(): /*elided*/ any;
                redInvm(): /*elided*/ any;
                redNeg(): /*elided*/ any;
                redPow(b: import("bn.js")): /*elided*/ any;
                copy(dest: import("bn.js")): void;
                clone(): import("bn.js");
                toString(base?: number | "hex", length?: number): string;
                toNumber(): number;
                toJSON(): string;
                toArray(endian?: import("bn.js").Endianness, length?: number): number[];
                toArrayLike(ArrayType: typeof Buffer, endian?: import("bn.js").Endianness, length?: number): Buffer;
                toArrayLike(ArrayType: any[], endian?: import("bn.js").Endianness, length?: number): any[];
                toBuffer(endian?: import("bn.js").Endianness, length?: number): Buffer;
                bitLength(): number;
                zeroBits(): number;
                byteLength(): number;
                isNeg(): boolean;
                isEven(): boolean;
                isOdd(): boolean;
                isZero(): boolean;
                cmp(b: import("bn.js")): -1 | 0 | 1;
                ucmp(b: import("bn.js")): -1 | 0 | 1;
                cmpn(b: number): -1 | 0 | 1;
                lt(b: import("bn.js")): boolean;
                ltn(b: number): boolean;
                lte(b: import("bn.js")): boolean;
                lten(b: number): boolean;
                gt(b: import("bn.js")): boolean;
                gtn(b: number): boolean;
                gte(b: import("bn.js")): boolean;
                gten(b: number): boolean;
                eq(b: import("bn.js")): boolean;
                eqn(b: number): boolean;
                toTwos(width: number): import("bn.js");
                fromTwos(width: number): import("bn.js");
                neg(): import("bn.js");
                ineg(): import("bn.js");
                abs(): import("bn.js");
                iabs(): import("bn.js");
                add(b: import("bn.js")): import("bn.js");
                iadd(b: import("bn.js")): import("bn.js");
                addn(b: number): import("bn.js");
                iaddn(b: number): import("bn.js");
                sub(b: import("bn.js")): import("bn.js");
                isub(b: import("bn.js")): import("bn.js");
                subn(b: number): import("bn.js");
                isubn(b: number): import("bn.js");
                mul(b: import("bn.js")): import("bn.js");
                imul(b: import("bn.js")): import("bn.js");
                muln(b: number): import("bn.js");
                imuln(b: number): import("bn.js");
                sqr(): import("bn.js");
                isqr(): import("bn.js");
                pow(b: import("bn.js")): import("bn.js");
                div(b: import("bn.js")): import("bn.js");
                divn(b: number): import("bn.js");
                idivn(b: number): import("bn.js");
                divmod(b: import("bn.js"), mode?: "div" | "mod", positive?: boolean): {
                    div: import("bn.js");
                    mod: import("bn.js");
                };
                mod(b: import("bn.js")): import("bn.js");
                umod(b: import("bn.js")): import("bn.js");
                modn(b: number): number;
                modrn(b: number): number;
                divRound(b: import("bn.js")): import("bn.js");
                or(b: import("bn.js")): import("bn.js");
                ior(b: import("bn.js")): import("bn.js");
                uor(b: import("bn.js")): import("bn.js");
                iuor(b: import("bn.js")): import("bn.js");
                and(b: import("bn.js")): import("bn.js");
                iand(b: import("bn.js")): import("bn.js");
                uand(b: import("bn.js")): import("bn.js");
                iuand(b: import("bn.js")): import("bn.js");
                andln(b: number): import("bn.js");
                xor(b: import("bn.js")): import("bn.js");
                ixor(b: import("bn.js")): import("bn.js");
                uxor(b: import("bn.js")): import("bn.js");
                iuxor(b: import("bn.js")): import("bn.js");
                setn(b: number, value: boolean | 0 | 1): import("bn.js");
                shln(b: number): import("bn.js");
                ishln(b: number): import("bn.js");
                ushln(b: number): import("bn.js");
                iushln(b: number): import("bn.js");
                shrn(b: number): import("bn.js");
                ishrn(b: number): import("bn.js");
                ushrn(b: number): import("bn.js");
                iushrn(b: number): import("bn.js");
                testn(b: number): boolean;
                maskn(b: number): import("bn.js");
                imaskn(b: number): import("bn.js");
                bincn(b: number): import("bn.js");
                notn(w: number): import("bn.js");
                inotn(w: number): import("bn.js");
                gcd(b: import("bn.js")): import("bn.js");
                egcd(b: import("bn.js")): {
                    a: import("bn.js");
                    b: import("bn.js");
                    gcd: import("bn.js");
                };
                invm(b: import("bn.js")): import("bn.js");
                toRed(reductionContext: import("bn.js").ReductionContext): /*elided*/ any;
            };
        };
    } | null>;
    processRaydiumPool(id: PublicKey, quoteAmountMinPool: TokenAmount, quoteAmountMaxPool: TokenAmount, quoteToken: Token | undefined, poolState: LiquidityStateV4): Promise<void>;
    private createPoolKeys;
    private fetchOpenBookAccounts;
    parseTokenAccountData(account?: PublicKey): Promise<{
        tokenAccounts: TokenAccount[];
        tokenAccountRawInfos: TokenAccountRaw[];
    }>;
    private validateTradeInput;
    buyRaydiumToken(input: {
        tokenNative: string;
        tokenMint: string;
        amount: number;
        slippage: number;
    }): Promise<{
        status: string;
        bought: number;
        tokens: number;
        message: string;
        txId: string | undefined;
    } | undefined>;
    sellRaydiumToken(input: {
        tokenNative: string;
        tokenMint: string;
        amount: number;
        slippage: number;
    }): Promise<{
        status: string;
        sold: number;
        tokens: number;
        message: string;
        txId: string | undefined;
    } | undefined>;
    apiSwapIn(input: {
        tokenNative: string;
        tokenMint: string;
        amount: number;
        slippage: number;
    }): Promise<{
        status: string;
        bought: number;
        tokens: number;
        message: string;
        txId: string | undefined;
    } | undefined>;
    apiSwapOut(input: {
        tokenNative: string;
        tokenMint: string;
        amount: number;
        slippage: number;
    }): Promise<{
        status: string;
        sold: number;
        tokens: number;
        message: string;
        txId: string | undefined;
    } | undefined>;
    createAssociatedTokenAccount(mint: string): Promise<PublicKey>;
}
//# sourceMappingURL=ray.operation.d.ts.map