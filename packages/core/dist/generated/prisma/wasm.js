
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.AgentPersonaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  walletAddress: 'walletAddress',
  description: 'description',
  personality: 'personality',
  traits: 'traits',
  avatar: 'avatar',
  merkleRoot: 'merkleRoot',
  evolutionLevel: 'evolutionLevel',
  experiencePoints: 'experiencePoints',
  memoryData: 'memoryData',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProofOfActionScalarFieldEnum = {
  id: 'id',
  actionType: 'actionType',
  actionData: 'actionData',
  actionParameters: 'actionParameters',
  transactionHash: 'transactionHash',
  blockNumber: 'blockNumber',
  amount: 'amount',
  tokenAddress: 'tokenAddress',
  result: 'result',
  isSuccessful: 'isSuccessful',
  gasUsed: 'gasUsed',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  personaId: 'personaId'
};

exports.Prisma.ProofOfEvidenceScalarFieldEnum = {
  id: 'id',
  evidenceType: 'evidenceType',
  evidenceData: 'evidenceData',
  sourceType: 'sourceType',
  sourceUrl: 'sourceUrl',
  hash: 'hash',
  metadata: 'metadata',
  isVerified: 'isVerified',
  confidenceScore: 'confidenceScore',
  verificationMethod: 'verificationMethod',
  createdAt: 'createdAt',
  personaId: 'personaId'
};

exports.Prisma.ProofOfEvolutionScalarFieldEnum = {
  id: 'id',
  evolutionType: 'evolutionType',
  previousState: 'previousState',
  newState: 'newState',
  changes: 'changes',
  reasoning: 'reasoning',
  trigger: 'trigger',
  version: 'version',
  isReversible: 'isReversible',
  impactScore: 'impactScore',
  merkleProof: 'merkleProof',
  createdAt: 'createdAt',
  personaId: 'personaId'
};

exports.Prisma.MemorySnapshotScalarFieldEnum = {
  id: 'id',
  snapshotType: 'snapshotType',
  memoryData: 'memoryData',
  merkleRoot: 'merkleRoot',
  merkleProofs: 'merkleProofs',
  nodeCount: 'nodeCount',
  sizeBytes: 'sizeBytes',
  compressionMethod: 'compressionMethod',
  isCompressed: 'isCompressed',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  personaId: 'personaId'
};

exports.Prisma.SolanaTransactionScalarFieldEnum = {
  id: 'id',
  transactionHash: 'transactionHash',
  agentWallet: 'agentWallet',
  blockNumber: 'blockNumber',
  blockTime: 'blockTime',
  slot: 'slot',
  status: 'status',
  confirmations: 'confirmations',
  instructions: 'instructions',
  accountKeys: 'accountKeys',
  fee: 'fee',
  memo: 'memo',
  logs: 'logs',
  errorMessage: 'errorMessage',
  balanceChanges: 'balanceChanges',
  tokenBalanceChanges: 'tokenBalanceChanges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenMetadataScalarFieldEnum = {
  id: 'id',
  mintAddress: 'mintAddress',
  name: 'name',
  symbol: 'symbol',
  description: 'description',
  logoUri: 'logoUri',
  decimals: 'decimals',
  totalSupply: 'totalSupply',
  circulatingSupply: 'circulatingSupply',
  price: 'price',
  marketCap: 'marketCap',
  volume24h: 'volume24h',
  priceChange24h: 'priceChange24h',
  social: 'social',
  website: 'website',
  isActive: 'isActive',
  isVerified: 'isVerified',
  tags: 'tags',
  extensions: 'extensions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  AgentPersona: 'AgentPersona',
  ProofOfAction: 'ProofOfAction',
  ProofOfEvidence: 'ProofOfEvidence',
  ProofOfEvolution: 'ProofOfEvolution',
  MemorySnapshot: 'MemorySnapshot',
  SolanaTransaction: 'SolanaTransaction',
  TokenMetadata: 'TokenMetadata'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
